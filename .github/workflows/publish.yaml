# From tutorial: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
name: Publish

on:
  push:
    paths:
      - mcc/**
      - pyproject.toml
      - .github/workflows/publish.yaml
      - tests/**
      - requirements-dev.txt

jobs:
  unit-test:
    name: Unit test distribution 🧪
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Run Unit tests
      run: |
        pip install -r requirements-dev.txt
        python -m pip install .
        python -m pytest

  build:
    name: Build and unit test distribution 📦
    runs-on: ubuntu-latest
    needs:
    - unit-test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
  end-to-end-test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs:
    - build
    steps:
    - uses: actions/checkout@v4
      with:
          submodules: 'true'
    - name:
      run: |
        set -x
        # Alias doesn't work for subshells, so create a function instead
        podman-compose() { docker-compose $@; }
        export -f podman-compose
        podman() { docker $@; }
        export -f podman
        cd ./tests/e2e
        pwd
        ls ..
        ls ../..
        ls ../../minecraft-console-client-source
        ls ../../minecraft-console-client-source/Docker
        ./run_tests.sh


  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    needs:
    - end-to-end-test
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/mcc.py

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          package_updated:
            - pyproject.toml
    - name: Download all the dists
      uses: actions/download-artifact@v3
      if: steps.filter.outputs.package_updated == 'true'
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: steps.filter.outputs.package_updated == 'true'
      with:
        repository-url: https://test.pypi.org/legacy/

  # Enable both once I get my account setup on PyPi
  # publish-to-pypi:
  #   name: >-
  #     Publish Python 🐍 distribution 📦 to PyPI
  #   if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
  #   needs:
  #   - build
  #   - publish-to-testpypi
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/mcc.py
  #   permissions:
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing
  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Publish distribution 📦 to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  # github-release:
  #   name: >-
  #     Sign the Python 🐍 distribution 📦 with Sigstore
  #     and upload them to GitHub Release
  #   needs:
  #   - publish-to-pypi
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write  # IMPORTANT: mandatory for making GitHub Releases
  #     id-token: write  # IMPORTANT: mandatory for sigstore

  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Sign the dists with Sigstore
  #     uses: sigstore/gh-action-sigstore-python@v1.2.3
  #     with:
  #       inputs: >-
  #         ./dist/*.tar.gz
  #         ./dist/*.whl
  #   - name: Create GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     run: >-
  #       gh release create
  #       '${{ github.ref_name }}'
  #       --repo '${{ github.repository }}'
  #       --notes ""
  #   - name: Upload artifact signatures to GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     # Upload to GitHub Release using the `gh` CLI.
  #     # `dist/` contains the built packages, and the
  #     # sigstore-produced signatures and certificates.
  #     run: >-
  #       gh release upload
  #       '${{ github.ref_name }}' dist/**
  #       --repo '${{ github.repository }}'
